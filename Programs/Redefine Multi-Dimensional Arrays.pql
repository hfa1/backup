program
| 1. A one dimensional array is a list. A two dimensional array is a spreadsheet.
| 2. Since the number of elements in each dimension (or rows and columns, in this example)
| may not be known ahead of time, the elements in each dimension are defined as 10 (larger than
| necessary) so that it can be redefined later.
. string * 32 array TEST$ (10,10)
| TEST$ (ROW,COL)
| 3. For the sake of testing, the array is filled with spreadsheet data. The first row is variable names, the
| other rows are data.
. TEST$ (1,1) = 'DCCID'
. TEST$ (1,2) = 'ASSESS_PT'
. TEST$ (1,3) = 'NOWEEKS'
. TEST$ (1,4) = 'RATER_ID'
. TEST$ (1,5) = 'FORMDATE'
. TEST$ (2,1) = '100'
. TEST$ (2,2) = '1'
. TEST$ (2,3) = '0'
. TEST$ (2,4) = 'DM'
. TEST$ (2,5) = '01/21/2013'
. TEST$ (3,1) = '105'
. TEST$ (3,2) = '2'
. TEST$ (3,3) = '12'
. TEST$ (3,4) = 'JS'
. TEST$ (3,5) = '05/15/2012'
. TEST$ (4,1) = '110'
. TEST$ (4,2) = '2'
. TEST$ (4,3) = '10'
. TEST$ (4,4) = 'BB'
. TEST$ (4,5) = '03/10/2014'
| 4. The entire array is written out
. write 'EXAMPLE A'
. for x = 1,4
.  for y = 1,5
.   write x y TEST$(x,y)
.  end for
. end for
| 5. However, the actual dimensions of the array are now known. The array is redefined to match the size of
| the spreadsheet (4 rows and 5 columns).
. write ''
. write 'EXAMPLE B'
. redefine array 'TEST$' (4,5)
. for x = 1,4
.  for y = 1,5
.   write x y TEST$(x,y)
.  end for
. end for
| 6. Is it possible to have a redefine array command that would, in this example, write out the array the same
| in EXAMPLE A as EXAMPLE B?
end program
