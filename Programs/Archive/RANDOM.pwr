PROCEDURE      DIALOG.RANDOM:T  (156419,65027)  |Last amended Jan 17, 2011,18:03:47
|| Generated by DP - don't edit anything outside |{...|}

|{ Header
| Path:      DCCPROCF
| File name: UTIL.RESTRUCT
| Creator:   David P. Merle
| Created:   01/01/2007
| Retired:
| Called by: SYSPROC.SYSTEM.MAINMENU
| Calls:     DCCPROCF.UTIL.NEWSCRNS, DCCPROCF.BACKUPS.CXSUMS, DCCPROCF.UTIL.MISSING
| Reason:    Allows user to make modifications to the database. Unload, deletes, reloads the db.
| Output:
| Modified:
call DCCPROCF.SYSTEM.ALLRECS
|
program
|}

integer*2 m_id, m_arg1, m_arg2

integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDCLOSE ; preset IDCLOSE  ( 0)
integer*1 TREATL                          ; preset TREATL                           (1 )
integer*1 TREATSE                         ; preset TREATSE                          (2 )
integer*1 TREATLIST                       ; preset TREATLIST                        (3 )
integer*1 TREAT1E                         ; preset TREAT1E                          (4 )
integer*1 WEIGHTL                         ; preset WEIGHTL                          (5 )
integer*1 WEIGHT1E                        ; preset WEIGHT1E                         (6 )
integer*1 WEIGHT1L                        ; preset WEIGHT1L                         (7 )
integer*1 TREAT2E                         ; preset TREAT2E                          (8 )
integer*1 WEIGHT2L                        ; preset WEIGHT2L                         (9 )
integer*1 WEIGHT2E                        ; preset WEIGHT2E                         (10 )
integer*1 TREAT3E                         ; preset TREAT3E                          (11 )
integer*1 WEIGHT3L                        ; preset WEIGHT3L                         (12 )
integer*1 WEIGHT3E                        ; preset WEIGHT3E                         (13 )
integer*1 TREAT4E                         ; preset TREAT4E                          (14 )
integer*1 WEIGHT4L                        ; preset WEIGHT4L                         (15 )
integer*1 WEIGHT4E                        ; preset WEIGHT4E                         (16 )
integer*1 STRATUML                        ; preset STRATUML                         (17 )
integer*1 STRATUMLIST                     ; preset STRATUMLIST                      (18 )
integer*1 SIZEL                           ; preset SIZEL                            (19 )
integer*1 STRATAE                         ; preset STRATAE                          (20 )
integer*1 STRATUM1E                       ; preset STRATUM1E                        (21 )
integer*1 SIZE1E                          ; preset SIZE1E                           (22 )
integer*1 STRATUM2E                       ; preset STRATUM2E                        (23 )
integer*1 SIZE2E                          ; preset SIZE2E                           (24 )
integer*1 STRATUM3E                       ; preset STRATUM3E                        (25 )
integer*1 SIZE3E                          ; preset SIZE3E                           (26 )
integer*1 STRATUM4E                       ; preset STRATUM4E                        (27 )
integer*1 SIZE4E                          ; preset SIZE4E                           (28 )
integer*1 BLOCK1L                         ; preset BLOCK1L                          (29 )
integer*1 BLOCK1E                         ; preset BLOCK1E                          (30 )
integer*1 RANDOMC                         ; preset RANDOMC                          (31 )
integer*1 BLOCK2L                         ; preset BLOCK2L                          (32 )
integer*1 BLOCK2E                         ; preset BLOCK2E                          (33 )
integer*1 SUBJECTL                        ; preset SUBJECTL                         (34 )
integer*1 SUBJECTSE                       ; preset SUBJECTSE                        (35 )
integer*1 RANDOMB                         ; preset RANDOMB                          (36 )
integer*1 DEFAULTB                        ; preset DEFAULTB                         (37 )
integer*1 BOT_LINE                        ; preset BOT_LINE                         (38 )
integer*1 HELP1                           ; preset HELP1                            (39 )
integer*1 HELP2                           ; preset HELP2                            (40 )
integer*1 HELP3                           ; preset HELP3                            (41 )
integer*1 HELP4                           ; preset HELP4                            (42 )
integer*1 HELP5                           ; preset HELP5                            (43 )

|{ Prologue
|}

dialog "Random Treatment Assigner"

|{ Controls
postype 1
label    TREATL                          ,  30,       40,  44, "Treatments"
edit     TREATSE                         ,  45,       40,  30, 0, 0
label    TREATLIST                       ,  30,       90, 120, "Treatment Name"
edit     TREAT1E                         ,  45,       90, 120, 0, 0
label    WEIGHTL                         ,  30,      214,  40, "Weight"
edit     WEIGHT1E                        ,  45,      214,  29, 0, 0
label    WEIGHT1L                        ,  45,      250,  40, ""
edit     TREAT2E                         ,  60,       90, 120, 0, 0
label    WEIGHT2L                        ,  60,      250,  40, ""
edit     WEIGHT2E                        ,  60,      214,  29, 0, 0
edit     TREAT3E                         ,  75,       90, 120, 0, 0
label    WEIGHT3L                        ,  75,      250,  40, ""
edit     WEIGHT3E                        ,  75,      214,  29, 0, 0
edit     TREAT4E                         ,  90,       90, 120, 0, 0
label    WEIGHT4L                        ,  90,      250,  40, ""
edit     WEIGHT4E                        ,  90,      214,  29, 0, 0
label    STRATUML                        , 105,       40,  44, "Strata"
label    STRATUMLIST                     , 105,       90, 120, "Stratum Name"
label    SIZEL                           , 105,      214,  40, "Size"
edit     STRATAE                         , 120,       40,  30, 0, 0
edit     STRATUM1E                       , 120,       90, 120, 0, 0
edit     SIZE1E                          , 120,      214,  30, 0, 0
edit     STRATUM2E                       , 135,       90, 120, 0, 0
edit     SIZE2E                          , 135,      214,  30, 0, 0
edit     STRATUM3E                       , 150,       90, 120, 0, 0
edit     SIZE3E                          , 150,      214,  30, 0, 0
edit     STRATUM4E                       , 165,       90, 120, 0, 0
edit     SIZE4E                          , 165,      214,  30, 0, 0
label    BLOCK1L                         , 183,       40,  45, "Block Size"
edit     BLOCK1E                         , 195,       40,  30, 0, 0
check    RANDOMC                         , 198,       91,  81, "Random Block Sizes"
label    BLOCK2L                         , 183,      179,  76, "Upper Block Size"
edit     BLOCK2E                         , 195,      178,  30, 0, 0
label    SUBJECTL                        , 211,       40,  45, "Subjects"
edit     SUBJECTSE                       , 225,       40,  30, 0, 0
button   RANDOMB                         , 225,       90,  80, 0, "Randomize"
button   DEFAULTB                        , 225,      178,  80, 1, ""
line     BOT_LINE                        ,   0, 252,   5, 340
button   HELP1                           , 225,       25,  10, 0, "?"
button   HELP2                           ,  45,       25,  10, 0, "?"
button   HELP3                           ,  45,       75,   9, 0, "?"
button   HELP4                           , 195,       25,  10, 0, "?"
button   HELP5                           , 120,       25,  10, 0, "?"
|}

initial
|{ Attribs

|}
|{ Init
. window clear
. set SMISS# (smissing)
. set NMISS# (nmissing)
. set ITALIC UNDERL UNDERL(0) BOLD SMALL (2) FONT('lucida console')
. set item font SUBJECTSE,BOLD,ITALIC,UNDERL,SMALL,FONT
. integer * 1 YES NO STRATA# STRATUM# TREATS# CONTROL# EXIT#
. integer * 4 SUBJECTS# TOTAL# GROUPS# SIZE# SIZES# UPPER# LOWER# BLOCKS# RENUM# WEIGHTS#
. real * 8 RAND#
. integer * 4 array WEIGHT SUBJECTS SIZES(4)
. string * 32 array TREAT STRATUM(4) ASSIGN TREATMENT(10)
. value labels CONTROL# (1)'TREATL'
                        (2)'TREATSE'
                        (3)'TREATLIST'
                        (4)'TREAT1E'
                        (5)'WEIGHTL'
                        (6)'WEIGHT1E'
                        (7)'WEIGHT1L'
                        (8)'TREAT2E'
                        (9)'WEIGHT2L'
                        (10)'WEIGHT2E'
                        (11)'TREAT3E'
                        (12)'WEIGHT3L'
                        (13)'WEIGHT3E'
                        (14)'TREAT4E'
                        (15)'WEIGHT4L'
                        (16)'WEIGHT4E'
                        (17)'STRATUML'
                        (18)'STRATUMLIST'
                        (19)'SIZEL'
                        (20)'STRATAE'
                        (21)'STRATUM1E'
                        (22)'SIZE1E'
                        (23)'STRATUM2E'
                        (24)'SIZE2E'
                        (25)'STRATUM3E'
                        (26)'SIZE3E'
                        (27)'STRATUM4E'
                        (28)'SIZE4E'
                        (29)'BLOCK1L'
                        (30)'BLOCK1E'
                        (31)'RANDOMC'
                        (32)'BLOCK2L'
                        (33)'BLOCK2E'
                        (34)'SUBJECTL'
                        (35)'SUBJECTSE'
                        (36)'RANDOMB'
                        (37)'DEFAULTB'
                        (38)'BOT_LINE'
                        (39)'HELP1'
                        (40)'HELP2'
                        (41)'HELP3'
                        (42)'HELP4'
                        (43)'HELP5'
. execute subprocedure INITIALIZE
|}
end initial

message ALL m_id, m_arg1, m_arg2

|{ Message
. CONTROL# = getfocus(0)
| . write [vallab(CONTROL#)]
|}

ifthen (m_id eq RANDOMC )
|< RANDOMC
. ifthen (getichk(RANDOMC) = YES)
.   show item BLOCK2L
.   show item BLOCK2E
.   focus item BLOCK2E
. else
.   hide item BLOCK2L
.   hide item BLOCK2E
.   focus item RANDOMB
. endif
|>
next message
endif

ifthen (m_id eq RANDOMB )
|< RANDOMB
. execute subprocedure RANDOMIZE
|>
next message
endif

ifthen (m_id eq DEFAULTB )
|< DEFAULTB
. execute subprocedure CONTROL
|>
next message
endif

ifthen (m_id eq HELP1 )
|< HELP1
. display infobox 'Enter from 2 to 99998 subjects that require randomized treatment assignments. Include cases and controls.'
|>
next message
endif

ifthen (m_id eq HELP2 )
|< HELP2
display infobox 'If desired, enter from 2 to 4 strata. Enter blank, 0 or 1 for a single treatment list.'
|>
next message
endif

ifthen (m_id eq HELP3 )
|< HELP3
display infobox 'Enter the name of any treatment strata, if desired.'
|>
next message
endif

ifthen (m_id eq HELP4 )
|< HELP4
display infobox 'Enter the block size, if desired. Treatment assignments will be randomly assigned but evenly balanced within each block. For randomized block assignments, enter a second block size for the upper block size.'
|>
next message
endif

ifthen (m_id eq HELP5 )
|< HELP5
display infobox 'You must enter at least 2 treatments. For random block assignment 2 is the maximum number of treatments. Otherwise, enter up to 4 treatments.'
|>
next message
endif

if (m_id eq 0) exit message

end message

message focus M_FOCUS
|< FOCUS
. CONTROL# = M_FOCUS
. execute subprocedure CONTROL
|>
if (m_id eq 0) exit message

end message


end dialog
|{ Exit
|}
|{ Footer
. subprocedure CONTROL
| . write 'CONTROL'
.   ifthen (CONTROL# = TREATSE  ) execute subprocedure GETTREATMENTS
.   elseif (CONTROL# = TREAT1E  ) execute subprocedure GETTREATMENT1
.   elseif (CONTROL# = TREAT2E  ) execute subprocedure GETTREATMENT2
.   elseif (CONTROL# = TREAT3E  ) execute subprocedure GETTREATMENT3
.   elseif (CONTROL# = TREAT4E  ) execute subprocedure GETTREATMENT4
.   elseif (CONTROL# = WEIGHT1E ) execute subprocedure GETWEIGHT1
.   elseif (CONTROL# = WEIGHT2E ) execute subprocedure GETWEIGHT2
.   elseif (CONTROL# = WEIGHT3E ) execute subprocedure GETWEIGHT3
.   elseif (CONTROL# = WEIGHT4E ) execute subprocedure GETWEIGHT4
.   elseif (CONTROL# = BLOCK1E  ) execute subprocedure GETBLOCK1
.   elseif (CONTROL# = BLOCK2E  ) execute subprocedure GETBLOCK2
.   elseif (CONTROL# = STRATAE  ) execute subprocedure GETSTRATA
.   elseif (CONTROL# = STRATUM1E) execute subprocedure GETSTRATUM1
.   elseif (CONTROL# = STRATUM2E) execute subprocedure GETSTRATUM2
.   elseif (CONTROL# = STRATUM3E) execute subprocedure GETSTRATUM3
.   elseif (CONTROL# = STRATUM4E) execute subprocedure GETSTRATUM4
.   elseif (CONTROL# = SIZE1E   ) execute subprocedure GETSUBJECTS1
.   elseif (CONTROL# = SIZE2E   ) execute subprocedure GETSUBJECTS2
.   elseif (CONTROL# = SIZE3E   ) execute subprocedure GETSUBJECTS3
.   elseif (CONTROL# = SIZE4E   ) execute subprocedure GETSUBJECTS4
.   elseif (CONTROL# = SUBJECTSE) execute subprocedure GETSUBJECTS
.   endif
| . write 'CONTROL Exiting'
. end subprocedure CONTROL
|
. subprocedure GETTREATMENTS
| . write 'GETTREATMENTS'
.   set WEIGHT * (0)
.   TREATS# = numbr(gettxt(TREATSE))
.   ifthen (exists(TREATS#) = NO)
.     display infobox 'Please enter at least 2 treatments'
.     focus item TREATSE
.   elseif(TREATS# < 2)
.     display infobox 'Please enter at least 2 treatments'
.     focus item TREATSE
.   elseif (TREATS# = 2)
.     show item TREAT1E
.     show item WEIGHT1E
.     set item WEIGHT1E,'1'
.     show item TREAT2E
.     show item WEIGHT2E
.     set item WEIGHT2E,'1'
.     hide item TREAT3E
.     hide item WEIGHT3E
.     hide item TREAT4E
.     hide item WEIGHT4E
.     focus item TREAT1E
.   elseif (TREATS# = 3)
.     show item TREAT1E
.     show item WEIGHT1E
.     set item WEIGHT1E,'1'
.     show item TREAT2E
.     show item WEIGHT2E
.     set item WEIGHT2E,'1'
.     show item TREAT3E
.     show item WEIGHT3E
.     set item WEIGHT3E,'1'
.     hide item TREAT4E
.     hide item WEIGHT4E
.     focus item TREAT1E
.   elseif (TREATS# = 4)
.     show item TREAT1E
.     show item WEIGHT1E
.     set item WEIGHT1E,'1'
.     show item TREAT2E
.     show item WEIGHT2E
.     set item WEIGHT2E,'1'
.     show item TREAT3E
.     show item WEIGHT3E
.     set item WEIGHT3E,'1'
.     show item TREAT4E
.     show item WEIGHT4E
.     set item WEIGHT4E,'1'
.     focus item TREAT1E
.   elseif (TREATS# > 4)
.     display infobox 'Please enter 4 or less treatments'
.     focus item TREATSE
.   endif
| . write 'GETTREATMENTS Exiting'
. end subprocedure GETTREATMENTS
|
. subprocedure GETTREATMENT1
.   TREAT(1) = gettxt(TREAT1E)
.   ifthen (len(TREAT(1)) > 0)
.     ifthen (LOWER# <> UPPER#)
.       focus item TREAT2E
.     elseif (LOWER# = 2)
.       focus item TREAT2E
.     else
.       focus item WEIGHT1E
.     endif
.   else
.     display infobox 'Please enter a treatment'
.     focus item TREAT1E
.   endif
. end subprocedure GETTREATMENT1
|
. subprocedure GETWEIGHT1
.   WEIGHT(1) = numbr(gettxt(WEIGHT1E))
.   ifthen (exists(WEIGHT(1)) = YES)
.     focus item TREAT2E
.   else
.     display infobox 'Please enter a number'
.     focus item WEIGHT1E
.   endif
. end subprocedure GETWEIGHT1
|
. subprocedure GETTREATMENT2
.   TREAT(2) = gettxt(TREAT2E)
.   ifthen (len(TREAT(2)) > 0)
.     focus item WEIGHT2E
.   elseif (TREAT(2) = TREAT(1))
.     display infobox 'Please enter a new treatment'
.     focus item TREAT2E
.   else
.     display infobox 'Please enter a treatment'
.   endif
. end subprocedure GETTREATMENT2
|
. subprocedure GETWEIGHT2
.   WEIGHT(2) = numbr(gettxt(WEIGHT2E))
.   ifthen (exists(WEIGHT(2)) = YES)
.     ifthen (TREATS# = 2)
.       focus item STRATAE
.     else
.       focus item TREAT3E
.     endif
.   else
.     display infobox 'Please enter a number'
.     focus item WEIGHT2E
.   endif
. end subprocedure GETWEIGHT2
|
. subprocedure GETTREATMENT3
.   TREAT(3) = gettxt(TREAT3E)
.   ifthen (len(TREAT(3)) > 0)
.     focus item WEIGHT3E
.   elseif (TREAT(3) = TREAT(2) or TREAT(3) = TREAT(1))
.     display infobox 'Please enter a new treatment'
.     focus item TREAT2E
.   else
.     display infobox 'Please enter a treatment'
.   endif
. end subprocedure GETTREATMENT3
|
. subprocedure GETWEIGHT3
.   WEIGHT(3) = numbr(gettxt(WEIGHT3E))
.   ifthen (exists(WEIGHT(3)) = YES)
.     ifthen (TREATS# = 3)
.       focus item STRATAE
.     else
.       focus item TREAT4E
.     endif
.   else
.     display infobox 'Please enter a number'
.     focus item WEIGHT3E
.   endif
. end subprocedure GETWEIGHT3
|
. subprocedure GETTREATMENT4
.   TREAT(4) = gettxt(TREAT4E)
.   ifthen (len(TREAT(4)) > 0)
.     focus item WEIGHT4E
.   elseif (TREAT(4) = TREAT(3) or TREAT(4) = TREAT(2) or TREAT(4) = TREAT(1))
.     display infobox 'Please enter a new treatment'
.     focus item TREAT2E
.   else
.     display infobox 'Please enter a treatment'
.   endif
. end subprocedure GETTREATMENT4
|
. subprocedure GETWEIGHT4
.   WEIGHT(4) = numbr(gettxt(WEIGHT4E))
.   ifthen (exists(WEIGHT(4)) = YES)
.     focus item STRATAE
.   else
.     display infobox 'Please enter a number'
.     focus item WEIGHT4E
.   endif
. end subprocedure GETWEIGHT4
|
. subprocedure GETSTRATA
| . write 'GETSTRATA'
.   STRATA# = numbr(gettxt(STRATAE))
.   ifthen (exists(STRATA#) = NO)
.     display infobox 'Please enter a number'
.     focus item STRATAE
.   elseif (STRATA# = 1)
.     show item STRATUM1E
.     show item SIZE1E
.     hide item STRATUM2E
.     hide item SIZE2E
.     hide item STRATUM3E
.     hide item SIZE3E
.     hide item STRATUM4E
.     hide item SIZE4E
.     focus item STRATUM1E
.   elseif (STRATA# = 2)
.     show item STRATUM1E
.     show item SIZE1E
.     show item STRATUM2E
.     show item SIZE2E
.     hide item STRATUM3E
.     hide item SIZE3E
.     hide item STRATUM4E
.     hide item SIZE4E
.     focus item STRATUM1E
.   elseif (STRATA# = 3)
.     show item STRATUM1E
.     show item SIZE1E
.     show item STRATUM2E
.     show item SIZE2E
.     show item STRATUM3E
.     show item SIZE3E
.     hide item STRATUM4E
.     hide item SIZE4E
.     focus item STRATUM1E
.   elseif (STRATA# = 4)
.     show item STRATUM1E
.     show item SIZE1E
.     show item STRATUM2E
.     show item SIZE2E
.     show item STRATUM3E
.     show item SIZE3E
.     show item STRATUM4E
.     show item SIZE4E
.     focus item STRATUM1E
.   else
.     display infobox 'Please enter between 1 and 4 strata.'
.     focus item STRATAE
.   endif
| . write 'GETSTRATA Exiting'
. end subprocedure GETSTRATA
|
. subprocedure GETSTRATUM1
.   STRATUM(1) = upper(trim(gettxt(STRATUM1E)))
.   ifthen (len(STRATUM(1)) > 0)
.     focus item SIZE1E
.   else
.     display infobox 'Please enter a stratum'
.     focus item STRATUM1E
.   endif
. end subprocedure GETSTRATUM1
|
. subprocedure GETSUBJECTS1
.   SUBJECTS(1) = numbr(gettxt(SIZE1E))
.   ifthen (amod(SUBJECTS(1),2) <> 0)
.     display infobox 'Please enter an even number'
.     focus item SIZE1E
.   elseif (amod(SUBJECTS(1),TREATS#) <> 0)
.     display infobox 'The number of subjects must be divisible by the number of treatments'
.     focus item SIZE1E
.   else
.     SUBJECTS# = SUBJECTS(1)
.     set item SUBJECTSE,format(SUBJECTS#)
.     ifthen (STRATA# = 1)
.       focus item BLOCK1E
.     else
.       focus item STRATUM2E
.     endif
.   endif
. end subprocedure GETSUBJECTS1
|
. subprocedure GETSTRATUM2
.   STRATUM(2) = upper(trim(gettxt(STRATUM2E)))
.   ifthen (len(STRATUM(2)) > 0)
.     focus item SIZE2E
.   elseif (STRATUM(2) = STRATUM(1))
.     display infobox 'Please enter a new stratum'
.     focus item STRATUM2E
.   else
.     display infobox 'Please enter a stratum'
.     focus item STRATUM2E
.   endif
. end subprocedure GETSTRATUM2
|
. subprocedure GETSUBJECTS2
.   SUBJECTS(2) = numbr(gettxt(SIZE2E))
.   ifthen (amod(SUBJECTS(2),2) <> 0)
.     display infobox 'Please enter an even number'
.     focus item SIZE2E
.   elseif (amod(SUBJECTS(2),TREATS#) <> 0)
.     display infobox 'The number of subjects must be divisible by the number of treatments'
.     focus item SIZE2E
.   else
.     SUBJECTS# = SUBJECTS(1) + SUBJECTS(2)
.     set item SUBJECTSE,format(SUBJECTS#)
.     ifthen (STRATA# = 2)
.       focus item BLOCK1E
.     else
.       focus item STRATUM3E
.     endif
.   endif
. end subprocedure GETSUBJECTS2
|
. subprocedure GETSTRATUM3
.   STRATUM(3) = upper(trim(gettxt(STRATUM3E)))
.   ifthen (len(STRATUM(3)) > 0)
.     focus item SIZE3E
.   elseif (STRATUM(3) = STRATUM(2) or STRATUM(3) = STRATUM(1))
.     display infobox 'Please enter a new stratum'
.     focus item STRATUM3E
.   else
.     display infobox 'Please enter a stratum'
.     focus item STRATUM3E
.   endif
. end subprocedure GETSTRATUM3
|
. subprocedure GETSUBJECTS3
.   SUBJECTS(3) = numbr(gettxt(SIZE3E))
.   ifthen (amod(SUBJECTS(3),2) <> 0)
.     display infobox 'Please enter an even number'
.     focus item SIZE3E
.   elseif (amod(SUBJECTS(3),TREATS#) <> 0)
.     display infobox 'The number of subjects must be divisible by the number of treatments'
.     focus item SIZE3E
.   else
.     SUBJECTS# = SUBJECTS(1) + SUBJECTS(2) + SUBJECTS(3)
.     set item SUBJECTSE,format(SUBJECTS#)
.     ifthen (STRATA# = 3)
.       focus item BLOCK1E
.     else
.       focus item STRATUM4E
.     endif
.   endif
. end subprocedure GETSUBJECTS3
|
. subprocedure GETSTRATUM4
.   STRATUM(4) = upper(trim(gettxt(STRATUM4E)))
.   ifthen (len(STRATUM(4)) > 0)
.     focus item SIZE4E
.   elseif (STRATUM(4) = STRATUM(3) or STRATUM(4) = STRATUM(2) or STRATUM(4) = STRATUM(1))
.     display infobox 'Please enter a new stratum'
.     focus item STRATUM4E
.   else
.     display infobox 'Please enter a stratum'
.     focus item STRATUM4E
.   endif
. end subprocedure GETSTRATUM4
|
. subprocedure GETSUBJECTS4
.   SUBJECTS(4) = numbr(gettxt(SIZE4E))
.   ifthen (amod(SUBJECTS(4),2) <> 0)
.     display infobox 'Please enter an even number'
.     focus item SIZE4E
.   elseif (amod(SUBJECTS(4),TREATS#) <> 0)
.     display infobox 'The number of subjects must be divisible by the number of treatments'
.     focus item SIZE4E
.   else
.     SUBJECTS# = SUBJECTS(1) + SUBJECTS(2) + SUBJECTS(3) + SUBJECTS(4)
.     set item SUBJECTSE,format(SUBJECTS#)
.     focus item BLOCK1E
.   endif
. end subprocedure GETSUBJECTS4
|
. subprocedure GETBLOCK1
.   LOWER# = numbr(gettxt(BLOCK1E))
.   ifthen (amod(LOWER#,2) <> 0)
.     display infobox 'Please enter an even block size number'
.     focus item BLOCK1E
.   elseif (LOWER# < 2 or LOWER# > 10000)
.     display infobox 'Please enter a block size between 2 and 10000'
.     focus item BLOCK1E
.   elseif (amod(LOWER#,TREATS#) <> 0)
.     display infobox 'Then block size must be divisible by the number of treatments'
.     focus item WEIGHT1E
.   else
.     focus item RANDOMC
.   endif
| . write 'GETBLOCK1 Exiting'
. end subprocedure GETBLOCK1
|
. subprocedure GETBLOCK2
| . write 'GETBLOCK2'
.   UPPER# = numbr(gettxt(BLOCK2E))
.   ifthen (amod(UPPER#,2) <> 0)
.     display infobox 'Please enter an even block size number'
.     focus item BLOCK2E
.   elseif (UPPER# < LOWER#)
.     display infobox 'Please enter an upper block size greater than the lower'
.     focus item BLOCK2E
.   elseif (UPPER# > 10000)
.     display infobox 'Please enter a block size less than 10000'
.     focus item BLOCK2E
|Even number: YES, Upper > Lower: YES, Upper < 10000):Yes (Even number between 2 and 10000)
.   else
.     focus item RANDOMB
.   endif
| . write 'GETBLOCK2'
. end subprocedure GETBLOCK2
|
|
. subprocedure GETSUBJECTS
| . write 'GETSUBJECTS'
.   SUBJECTS# = numbr(gettxt(SUBJECTSE))
.   ifthen (amod(SUBJECTS#,TREATS#) <> 0)
.     display infobox 'The number of subjects must be divisible by the number of treatments'
.     focus item SUBJECTSE
.   else
.     focus item RANDOMB
.   endif
| . write 'GETSUBJECTS Exiting'
. end subprocedure GETSUBJECTS
|
. subprocedure INITIALIZE
| . write 'INITIALIZE'
.   set NO LOWER# UPPER# SUBJECTS# TOTAL# PROCEED (0) YES STRATA# (1) SIZE SIZES * (0) WEIGHT * (1) TREATS# (2) TREAT STRATUM * ('')
.   hide item DEFAULTB
.   set item STRATAE,'1'
.   set item STRATUM1E,'Study Group'
.   SUBJECTS(1) = 100
.   set item SIZE1E,format(SUBJECTS(1))
.   SUBJECTS# = 100
.   set item SUBJECTSE,format(SUBJECTS#)
.   hide item STRATUM2E
.   hide item SIZE2E
.   hide item STRATUM3E
.   hide item SIZE3E
.   hide item STRATUM4E
.   hide item SIZE4E
.   hide item BLOCK2L
.   hide item BLOCK2E
.   disable item SUBJECTSE
.   RAND# = rand(now(0))        |Seed random number
| . write 'INITIALIZE Exiting'
. end subprocedure INITIALIZE
|
. subprocedure CHECKVALUES
| . write 'CHECKVALUES'
.   if (PROCEED = YES) execute subprocedure CHECKTREATMENTS
.   if (PROCEED = YES) execute subprocedure CHECKWEIGHTS
.   if (PROCEED = YES) execute subprocedure CHECKSTRATA
.   if (PROCEED = YES) execute subprocedure CHECKBLOCKS
.   if (PROCEED = YES) execute subprocedure CHECKSUBJECTS
| . write 'CHECKVALUES Exiting'
. end subprocedure CHECKVALUES
|
. subprocedure CHECKTREATMENTS
| . write 'CHECKTREATMENTS'
.   ifthen (exists(TREATS#) = NO or TREATS# < 2 or TREATS# > 4)
.     display infobox 'Please enter between 2 and 4 treatments'
.     focus item TREATSE
.     PROCEED = NO
.   else
.     PROCEED = YES
.   endif
| . write 'CHECKTREATMENTS Exiting'
. end subprocedure CHECKTREATMENTS
|
. subprocedure CHECKSTRATA
| . write 'CHECKSTRATA'
.   ifthen (STRATA# > 4)
.     display infobox 'Please enter between 1 and 4 strata'
.     focus item STRATAE
.     PROCEED = NO
.   endif
| . write 'CHECKSTRATA Exiting'
. end subprocedure CHECKSTRATA
|
. subprocedure CHECKBLOCKS
| . write 'CHECKBLOCKS' LOWER#
.   ifthen (LOWER# < 2 or LOWER# > 10000)
.     display infobox 'Please enter a block size between 2 and 10000'
.     focus item BLOCK1E
.     PROCEED = NO
.   elseif (UPPER# = 0)
.     UPPER# = LOWER#
.   endif
| . write 'CHECKBLOCKS Exiting' LOWER#
. end subprocedure CHECKBLOCKS
|
. subprocedure CHECKSUBJECTS
.   ifthen (exists(SUBJECTS#) = NO or SUBJECTS# < 2 or SUBJECTS# > 10000)
.     display infobox 'Please enter a block size between 2 and 10000'
.     focus item SUBJECTSE
.     PROCEED = NO
.   endif
. end subprocedure CHECKSUBJECTS
|
. subprocedure RANDOMIZE
.   PROCEED = YES
.   execute subprocedure CHECKVALUES
.   ifthen (PROCEED = YES)
.     SIZES# = ((UPPER# - LOWER#)/TREATS#) + 1                                  |The number of sizes is the number of random block sizes between the lower and upper block size
.     redefine array 'SIZES'(SIZES#)
.     for SIZE# = 1,SIZES#
.       SIZES(SIZE#) = LOWER# + (TREATS#*(SIZE# - 1))                           |Store one block size in each element of the SIZES array
.     end for
.     for STRATUM# = 1,STRATA#                                                  |For each stratum, write out a new list of treatment assignments
.       write 'Stratum ' STRATUM# 'of ' STRATA# ': 'STRATUM(STRATUM#)           |If strata are used, each one gets its own header
.       EXIT# = NO                                                              |For each stratum, EXIT# will be YES when the last subject has gotten a treatment assignment
.       TOTAL# = 0                                                              |Restart the count of subjects for each stratum
.       GROUPS# = SUBJECTS(STRATUM#)/LOWER#                                     |Calculate the minimum number of groups necessary to reach the total number subjects
.       for GROUP# = 1,GROUPS#                                                  |For example, if there are 1000 subjects and a block size of 4, the number of groups will be 250
.         if (EXIT# = YES) exit for                                             |If all the subjects have their assignment, exit (this will occur when their are random block assignments
.         RAND# = rand(0)                                                       |This random number is for creating random block assignments
.         for SIZE# = 1,SIZES#                                                  |For Random block assignments, there will be different block sizes. For example, if the lower block size is 4 and the upper block size is 10, there will be 4,6,8 and 10...or
.           ifthen (SUBJECTS(STRATUM#) - TOTAL# <= UPPER#)                      |If the number of subjects minus the number who have received assignments is less than or equal to the upper block size..it is time finish the last block of assignments and
.             BLOCKS# = SUBJECTS(STRATUM#) - TOTAL#                             |If this is the last block size, make it equal to the number of subjects who have not yet received their assignments
.             EXIT# = YES                                                       |Set the exit flag to YES, so that the next time around, the program will end
.             exit for                                                          |If this is the last block, no need to keep checking
.           elseif ((RAND# >= (SIZE# - 1)/SIZES#) and RAND# < SIZE#/SIZES#)     |Random Block Assignments: If the random number falls in between the percentages, make the block size
.             BLOCKS# = SIZES(SIZE#)                                            |This is the randomly assigned block size
.             exit for                                                          |When the assignment is made...exit the loop
.           endif
.         end for
.         redefine array 'ASSIGN'(BLOCKS#)                                      |Now that the block size is known..redefine the array to the proper size
.         z = 0
.         NUM# = BLOCKS#/TREATS#						|Create an array that contains the proper number of treatments in the proper proportions for one block size
.         for y = 1,NUM#							|NUM# is the number of times that the total number of treatments will go into a block
.           for x = 1,TREATS#
.             z = z + 1
.             ASSIGN(z) = TREAT(x)
.           end for
.         end for
.         RENUM# = BLOCKS#
.         redefine array 'ASSIGN'(RENUM#)
.         redefine array 'TREATMENT'(RENUM#)
.         for BLOCK# = 1,BLOCKS#
.           RAND# = rand(0)
.           for ASSIGN# = 1,RENUM#
.             ifthen (RAND# <= ASSIGN#/RENUM#)
.               TREATMENT(BLOCK#) = ASSIGN(ASSIGN#)
.               for x = ASSIGN#,RENUM# - 1
.                 ASSIGN(x) = ASSIGN(x + 1)
.               end for
.               RENUM# = RENUM# - 1
.               exit for
.             endif
.           end for
.         end for
.         for x = 1,BLOCKS#
.           TOTAL# = TOTAL# + 1
.           write [pad(format(TOTAL#),' ',5,5)][pad(format(x),' ',5,5)][pad(TREATMENT(x),' ',20,20)][pad('Size:',' ',6,6)] BLOCKS#
.         end for
.         write ''
.       end for
.     end for
.     exit program
.   endif
. end subprocedure RANDOMIZE
|
. subprocedure CHECKWEIGHTS
.   z = 0
.   WEIGHTS# = WEIGHT(1) + WEIGHT(2) + WEIGHT(3) + WEIGHT(4)
.   ifthen (amod(WEIGHTS#,TREATS#) <> 0)
.     display infobox 'The total weight must be divisible by the number of treatments'
.     focus item WEIGHT1E
.     PROCEED = NO
.   else
write 'There are ' TREATS# 'treatments'
c.     for x = 1,TREATS#
c.       for y = 1,WEIGHT(x)
c.         z = z + 1
c.         ASSIGN(z) = TREAT(x)
c write 'Assignment 'z WEIGHTS# TREAT(x)
c.       end for
c.     end for
.     PROCEED = YES
.   endif
. end subprocedure CHECKWEIGHTS
|
end program
|}
END PROCEDURE
