|| Generated by DP - don't edit anything outside |{...|}

|{ Header
| Path:      DCCPROCF
| File name: UTIL.RESTRUCT
| Creator:   David P. Merle
| Created:   01/01/2007
| Retired:
| Called by: SYSPROC.SYSTEM.MAINMENU
| Calls:     DCCPROCF.UTIL.NEWSCRNS, DCCPROCF.BACKUPS.CXSUMS, DCCPROCF.UTIL.MISSING
| Reason:    Allows user to make modifications to the database. Unload, deletes, reloads the db.
| Output:
| Modified:
call DCCPROCF.SYSTEM.ALLRECS
|
program
|}

integer*2 m_id, m_arg1, m_arg2

integer*1 IDSTATIC; preset IDSTATIC (-1)
integer*1 IDCLOSE ; preset IDCLOSE  ( 0)
integer*1 SUBJECTL                        ; preset SUBJECTL                         (1 )
integer*1 SUBJECTE                        ; preset SUBJECTE                         (2 )
integer*1 SUBJECTR                        ; preset SUBJECTR                         (3 )
integer*1 SUBJECTB                        ; preset SUBJECTB                         (4 )
integer*1 BLOCKL                          ; preset BLOCKL                           (13 )
integer*1 BLOCKE                          ; preset BLOCKE                           (14 )
integer*1 BLOCKR                          ; preset BLOCKR                           (15 )
integer*1 BLOCKB                          ; preset BLOCKB                           (16 )
integer*1 TREATL                          ; preset TREATL                           (5 )
integer*1 TREATE                          ; preset TREATE                           (6 )
integer*1 TREAT1                          ; preset TREAT1                           (7 )
integer*1 TREAT2                          ; preset TREAT2                           (8 )
integer*1 TREAT3                          ; preset TREAT3                           (9 )
integer*1 TREAT4                          ; preset TREAT4                           (10 )
integer*1 TREAT5                          ; preset TREAT5                           (11 )
integer*1 TREATB                          ; preset TREATB                           (12 )
integer*1 RANDOMB                         ; preset RANDOMB                          (17 )
integer*1 BOT_LINE                        ; preset BOT_LINE                         (18 )
integer*1 VARSOK                          ; preset VARSOK                           (19 )

|{ Prologue
|}

dialog "Restructure database"

|{ Controls
postype 1
label    SUBJECTL                        ,  30,       30, 232, "Number of subjects (include cases and controls)"
edit     SUBJECTE                        ,  40,       31,  68, 0, 0
label    SUBJECTR                        ,  40,      106,  40, ""
button   SUBJECTB                        ,  40,      160, 100, 0, "Number of Subjects"
label    BLOCKL                          ,  60,       30, 178, "Block Size"
edit     BLOCKE                          ,  70,       30,  68, 0, 0
label    BLOCKR                          ,  70,      110,  40, ""
button   BLOCKB                          ,  70,      160, 100, 0, "Block Size"
label    TREATL                          ,  90,       29, 178, "Treatments"
edit     TREATE                          , 100,       30,  68, 0, 0
label    TREAT1                          , 100,      107,  40, ""
label    TREAT2                          , 110,      107,  40, ""
label    TREAT3                          , 120,      107,  40, ""
label    TREAT4                          , 130,      107,  40, ""
label    TREAT5                          , 140,      107,  40, ""
button   TREATB                          , 100,      160, 100, 0, "Treatment"
button   RANDOMB                         , 150,      160, 100, 1, "Randomize" 
line     BOT_LINE                        ,   6, 237,  14, 344
label    VARSOK                          , 232,       30, 118, "Are rec vars named well"
|}

initial
|{ Init
. set SMISS# (smissing)
. set NMISS# (nmissing)
. set BOLD ITALIC UNDERL (0) / SIZE (0)
. set FONT('Courier New')
. string * 32 VFYFILE RECN$ SCREEN$
. string * 200 LINE$
. string * 300 EXEC$ SCHEMA1 SCHEMA2 SCH$L RES$L MAKESCRN BUFF$N BUFF$
. integer * 1 STAT YES NO PROCEED REDO START
. integer * 2 REC#
. integer * 4 CASE#C REC#C LINE#
. real * 8 BEFORE# AFTER# CHECKTOT RESULT#
. integer * 2 array REC#A (300)
. real * 8 array BEF AFT (300)
. string  * 32 array REC$A (300)
. integer *     2   FOR_VAR_#                  | cycle through variables
. string  *    32   VNAME$                     | Variable name
. integer *     1   VARISOK                    | Variable name uses standard naming convention
. set STAT NO CASE#C REC#C RESULT# PROCEED BEFORE# AFTER# CHECKTOT START REC# (0) YES (1)|
. integer * 1 TREATS# BLOCKS# GROUPS#
set TREATS# (0)
. real * 8 RAND#
. string * 32 array ASSIGN TREAT (10)
. string * 32 array SUBJECT (1000)
|}
end initial

message ALL m_id, m_arg1, m_arg2

|{ Message
|}

ifthen (m_id eq SUBJECTB )
|< SUBJECTB
. set item SUBJECTR,gettxt(SUBJECTE)
. set item SUBJECTE,''
|>
next message
endif

ifthen (m_id eq TREATB )
|< TREATB
. TREATS# = TREATS# + 1
. string * 32 TREAT$
. TREAT$ = gettxt(TREATE)
. ifthen (len(gettxt(TREAT1)) < 1)
.   set item TREAT1,TREAT$
. elseif (len(gettxt(TREAT2)) < 1)
.   set item TREAT2,TREAT$
. elseif (len(gettxt(TREAT3)) < 1)
.   set item TREAT3,TREAT$
. elseif (len(gettxt(TREAT4)) < 1)
.   set item TREAT4,TREAT$
. elseif (len(gettxt(TREAT5)) < 1)
.   set item TREAT5,TREAT$
. endif
. set item TREATE,''
|>
next message
endif

ifthen (m_id eq BLOCKB )
|< BLOCKB
. set item BLOCKR,gettxt(BLOCKE)
. set item BLOCKE,''
|>
next message
endif

ifthen (m_id eq RANDOMB )
|< RANDOMB
. SUBJECTS# = numbr(gettxt(SUBJECTE))
. ifthen (exists(SUBJECTS#) = YES)
.   set item SUBJECTR,format(SUBJECTS#)
.   set item SUBJECTE,''
.   focus item BLOCKE
. else
.   focus item SUBJECTE
. endif
. BLOCKS# = numbr(gettxt(BLOCKE))
. ifthen (exists(BLOCKS#) = YES)
.   set item BLOCKR,format(BLOCKS#)
.   set item BLOCKE,''
.   focus item TREATE
. else
.   display infobox 'The number of subjects must be divisible by the block size'
.   focus item BLOCKE
. endif
c. SUBJECTS# = numbr(gettxt(SUBJECTR))
c. BLOCKS# = numbr(gettxt(BLOCKR))
c write 'Divide ' [SUBJECTS#/BLOCKS#]
c write 'Subjects ' SUBJECTS# 'Blocks ' BLOCKS# 'Treatments ' TREATS# [amod(SUBJECTS#,BLOCKS#)]
. ifthen (amod(BLOCKS#,TREATS#) <> 0)
.   set item BLOCKR,''
. elseif (amod(SUBJECTS#,BLOCKS#) <> 0)
.   display infobox 'The number of subjects must be divisible by the block size'
. elseif (amod(SUBJECTS#,TREATS#) <> 0)
.   display infobox 'The number of subjects must be divisible by the number of treatment groups'
. endif
|>
next message
endif

if (m_id eq 0) exit message

end message


end dialog
|{ Exit
|}
|{ Footer
subprocedure RANDOMIZE
. set TREAT# (3) BLOCKSIZE (9)  GROUPS# (6)
. TREAT(1) = 'Control'
. TREAT(2) = 'Drug'
. TREAT(3) = 'Placebo'
. RAND# = rand(now(0))
. GROUPS# = 6
. for GROUP# = 1,GROUPS#
.   BLOCKS# = BLOCKSIZE
.   redefine array 'ASSIGN' (BLOCKS#)
.   z = 0
.   NUM# = BLOCKS#/TREAT#
.   for y = 1,NUM#
.     for x = 1,TREAT#
.       z = z + 1
.       ASSIGN(z) = TREAT(x)
.     end for
.   end for
.   for BLOCK# = 1,BLOCKS#
.     redefine array 'ASSIGN' (BLOCKS#)
.     RAND# = rand(0)
.     for ASSIGN# = 1,BLOCKS#
.       ifthen (RAND# <= ASSIGN#/BLOCKS#)
.         SUBJECT(BLOCK#) = ASSIGN(ASSIGN#)
.         for x = ASSIGN#,BLOCKS# - 1
.           ASSIGN(x) = ASSIGN(x + 1)
.         end for
.         BLOCKS# = BLOCKS# - 1
.         exit for
.       endif
.     end for
.   end for
.   for x = 1,BLOCKSIZE
.     write x SUBJECT(x)
.   end for
.   write ''
. end for
. end subprocedure RANDOMIZE
end program
